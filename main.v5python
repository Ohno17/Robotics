{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nLeftMotors_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nLeftMotors_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nLeftMotors = MotorGroup(LeftMotors_motor_a, LeftMotors_motor_b)\nRightMotors_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nRightMotors_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nRightMotors = MotorGroup(RightMotors_motor_a, RightMotors_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\nARM_PID_KP = 10\nARM_PID_TP = 50\n\ndrivetrain = DriveTrain(LeftMotors, RightMotors, 319.19, 295, 40, MM, 1)\n\nlVel = 0\nRVel = 0\n\nvoltMultiplier = 12\nspeedMultiplier = 1\n\ncAxisDrive = 0\ncAxisTurn = 0\n\nisSwingDriving = True\n\n# BLUE=TRUE, RED=FALSE\nalliance = True\n\ndef setupAddonMotor(motorobj, controllerbutton1, controllerbutton2):\n\n    def newmotorbutton1():\n        motorobj.spin(FORWARD)\n        while controllerbutton1.pressing():\n            wait(10, MSEC)\n        motorobj.stop()\n\n    def newmotorbutton2():\n        motorobj.spin(REVERSE)\n        while controllerbutton2.pressing():\n            wait(10, MSEC)\n        motorobj.stop()\n\n    controllerbutton1.pressed(newmotorbutton1)\n    controllerbutton2.pressed(newmotorbutton2)\n\n# Code to select the autonomous task\n\ndef selectSettings():\n\n    global isSwingDriving, speedMultiplier\n\n    # Configure swing driving\n\n    brain.screen.clear_screen()\n\n    brain.screen.set_fill_color(Color.BLUE)\n    brain.screen.draw_rectangle(0, 0, 240, 272 - 40)\n\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.draw_rectangle(240, 0, 240, 272 - 40)\n\n    brain.screen.set_fill_color(Color.WHITE)\n    brain.screen.draw_rectangle(0, 272 - 40, 240, 40)\n\n    brain.screen.set_cursor(0, 0)\n    brain.screen.print(\"Press Blue to turn on Swing Drive. Press Red to turn off Swing Drive.\")\n    brain.screen.next_row()\n\n    while not brain.screen.pressing():\n        wait(10, MSEC)\n    \n    if (not brain.screen.y_position() > 272 - 40) and brain.screen.x_position() > 240:\n        isSwingDriving = False\n\n    # Configure speed multiplier\n\n    brain.screen.clear_screen()\n\n    brain.screen.set_fill_color(Color.BLUE)\n    brain.screen.draw_rectangle(0, 0, 240, 272)\n\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.draw_rectangle(240, 0, 240, 272)\n\n    brain.screen.set_fill_color(Color.WHITE)\n    brain.screen.draw_rectangle(0, 272 - 40, 240, 40)\n\n    brain.screen.set_cursor(0, 0)\n    brain.screen.print(\"Press Blue to increase speed. Press Red to decrease speed.\")\n    brain.screen.next_row()\n\n    while not brain.screen.y_position() > 272 - 40:\n\n        while not brain.screen.pressing():\n            wait(15, MSEC)\n    \n        if brain.screen.x_position() > 240:\n            speedMultiplier -= 0.1\n        else:\n            speedMultiplier += 0.1\n\n        while brain.screen.pressing():\n            wait(15, MSEC)\n\ndef selectTeam():\n\n    global alliance\n\n    brain.screen.clear_screen()\n\n    brain.screen.set_fill_color(Color.BLUE)\n    brain.screen.draw_rectangle(0, 0, 240, 272 - 40)\n\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.draw_rectangle(240, 0, 240, 272 - 40)\n\n    brain.screen.set_fill_color(Color.WHITE)\n    brain.screen.draw_rectangle(0, 272 - 40, 240, 40)\n\n    brain.screen.set_cursor(0, 0)\n    brain.screen.print(\"Select team. Press White to choose settings.\")\n    brain.screen.next_row()\n\n    while not brain.screen.pressing():\n        wait(10, MSEC)\n    \n    if brain.screen.y_position() > 272 - 40:\n        selectSettings()\n        return False\n    elif brain.screen.x_position() > 240:\n        alliance = False\n\n    return True\n\ndef brainUserInterface():\n\n    while (not selectTeam()):\n        selectTeam()\n\n# DRIVING ---------------------------------------------------------\n\ndef handledrivetrainDriving():\n    if cAxisDrive > 0.1:\n        drivetrain.drive(FORWARD)\n    if cAxisDrive < -0.1:\n        drivetrain.drive(REVERSE)\n\ndef handledrivetrainTurning():\n    if cAxisTurn > 0.1:\n        drivetrain.turn(RIGHT)\n    if cAxisTurn < -0.1:\n        drivetrain.turn(LEFT)\n\ndef handleSwingDriving():\n    global RVel, lVel\n    # Driving\n    if cAxisDrive > 0:\n        lVel += 1\n        RVel += 1\n    if cAxisDrive < 0:\n        lVel -= 1\n        RVel -= 1\n\ndef setVars():\n    global cAxisDrive, cAxisTurn, lVel, RVel\n    # Variable updates\n    lVel = 0\n    RVel = 0\n    cAxisDrive = controller_1.axis3.position()\n    cAxisTurn = controller_1.axis1.position()\n\ndef handleSwingTurning():\n    global lVel, RVel\n    # Turning\n    if (not math.fabs(cAxisDrive) < 0.1):\n        turnRad = -1 * math.fabs(cAxisTurn)\n        if cAxisTurn > 0:\n            RVel += turnRad\n        if cAxisTurn < 0:\n            lVel += turnRad\n    else:\n        if cAxisTurn > 0:\n            RVel -= 1\n            lVel += 1\n        if cAxisTurn < 0:\n            RVel += 1\n            lVel -= 1\n\n# CONTROL FUNCTIONS ----------------------------------------------\n\ndef addonControl():\n\n    while (True):\n        wait(10, MSEC)\n\ndef movementControl():\n\n    while (True):\n\n        setVars()\n\n        if isSwingDriving:\n            handleSwingDriving()\n            handleSwingTurning()\n\n            # Apply \n            LeftMotors.spin(FORWARD, lVel * voltMultiplier * speedMultiplier, VOLT)\n            RightMotors.spin(FORWARD, RVel * voltMultiplier * speedMultiplier, VOLT)\n        else:\n            handledrivetrainDriving()\n            handledrivetrainTurning()\n\n            # If both of the controller sticks are in the neutral position, stop moving.\n            if (cAxisTurn < 0.1 and cAxisTurn > -0.1 and cAxisDrive > -0.1 and cAxisDrive < 0.1):\n                drivetrain.stop()\n\n        wait(10, MSEC)\n\n# MAIN FUNCTIONS --------------------------------------------------\n\ndef autonomous():\n    # Autonomous\n    pass\n\ndef main():\n\n    RightMotors.set_velocity(100, PERCENT)\n    LeftMotors.set_velocity(100, PERCENT)\n\n    drivetrain.set_drive_velocity(100 * speedMultiplier, PERCENT)\n    drivetrain.set_turn_velocity(100 * speedMultiplier, PERCENT)\n    drivetrain.set_stopping(COAST)\n\n    brainUserInterface()\n\n# SETUP -------------------------------------------------------------\n\ndef auton_wrap():\n    \n    auton_thread = Thread(autonomous)\n    \n    while(competition.is_autonomous() and competition.is_enabled()):\n        wait(10, MSEC)\n    \n    auton_thread.stop()\n\ndef driver_wrap():\n    \n    driver_thread = Thread(movementControl)\n    addon_thread = Thread(addonControl)\n    \n\n    while(competition.is_driver_control() and competition.is_enabled()):\n        wait(10, MSEC)\n    \n    driver_thread.stop()\n    addon_thread.stop()\n\ncompetition = Competition(driver_wrap, auton_wrap)\n\nmain()\n\n# Activates after user interface is done.\n\nif brain.battery.capacity() < 70:\n    controller_1.rumble(\"----\")\n    controller_1.screen.print(\"Battery!\")\n    controller_1.screen.next_row()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"LeftMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"RightMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}